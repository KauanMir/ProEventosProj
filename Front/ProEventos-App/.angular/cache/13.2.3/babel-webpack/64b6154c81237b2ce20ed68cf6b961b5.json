{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, Component, ChangeDetectionStrategy, EventEmitter, Directive, Input, Output, NgModule } from '@angular/core';\nimport { getBsVer, warnOnce, parseTriggers, OnChange } from 'ngx-bootstrap/utils';\nimport * as i3 from 'ngx-bootstrap/positioning';\nimport { PlacementForBs5, PositioningService } from 'ngx-bootstrap/positioning';\nimport { __decorate, __metadata } from 'tslib';\nimport { timer } from 'rxjs';\nimport * as i1 from 'ngx-bootstrap/component-loader';\nimport { ComponentLoaderFactory } from 'ngx-bootstrap/component-loader';\nimport { CommonModule } from '@angular/common';\n/** Default values provider for tooltip */\n\nconst _c0 = [\"*\"];\n\nclass TooltipConfig {\n  constructor() {\n    /** sets disable adaptive position */\n    this.adaptivePosition = true;\n    /** tooltip placement, supported positions: 'top', 'bottom', 'left', 'right' */\n\n    this.placement = 'top';\n    /** array of event names which triggers tooltip opening */\n\n    this.triggers = 'hover focus';\n    /** delay before showing the tooltip */\n\n    this.delay = 0;\n  }\n\n}\n\nTooltipConfig.ɵfac = function TooltipConfig_Factory(t) {\n  return new (t || TooltipConfig)();\n};\n\nTooltipConfig.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: TooltipConfig,\n  factory: TooltipConfig.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TooltipConfig, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n\nclass TooltipContainerComponent {\n  constructor(config) {\n    Object.assign(this, config);\n  }\n\n  get _bsVersions() {\n    return getBsVer();\n  }\n\n  ngAfterViewInit() {\n    this.classMap = {\n      in: false,\n      fade: false\n    };\n\n    if (this.placement) {\n      if (this._bsVersions.isBs5) {\n        this.placement = PlacementForBs5[this.placement];\n      }\n\n      this.classMap[this.placement] = true;\n    }\n\n    this.classMap[`tooltip-${this.placement}`] = true;\n    this.classMap[\"in\"] = true;\n\n    if (this.animation) {\n      this.classMap[\"fade\"] = true;\n    }\n\n    if (this.containerClass) {\n      this.classMap[this.containerClass] = true;\n    }\n  }\n\n}\n\nTooltipContainerComponent.ɵfac = function TooltipContainerComponent_Factory(t) {\n  return new (t || TooltipContainerComponent)(i0.ɵɵdirectiveInject(TooltipConfig));\n};\n\nTooltipContainerComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: TooltipContainerComponent,\n  selectors: [[\"bs-tooltip-container\"]],\n  hostAttrs: [\"role\", \"tooltip\"],\n  hostVars: 7,\n  hostBindings: function TooltipContainerComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵattribute(\"id\", ctx.id);\n      i0.ɵɵclassMap(\"tooltip in tooltip-\" + ctx.placement + \" \" + \"bs-tooltip-\" + ctx.placement + \" \" + ctx.placement + \" \" + ctx.containerClass);\n      i0.ɵɵclassProp(\"show\", !ctx._bsVersions.isBs3)(\"bs3\", ctx._bsVersions.isBs3);\n    }\n  },\n  ngContentSelectors: _c0,\n  decls: 3,\n  vars: 0,\n  consts: [[1, \"tooltip-arrow\", \"arrow\"], [1, \"tooltip-inner\"]],\n  template: function TooltipContainerComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵelement(0, \"div\", 0);\n      i0.ɵɵelementStart(1, \"div\", 1);\n      i0.ɵɵprojection(2);\n      i0.ɵɵelementEnd();\n    }\n  },\n  styles: [\".tooltip[_nghost-%COMP%]{display:block;pointer-events:none}.bs3.tooltip.top[_nghost-%COMP%] > .arrow[_ngcontent-%COMP%]{margin-left:-2px}.bs3.tooltip.bottom[_nghost-%COMP%]{margin-top:0}.bs3.bs-tooltip-left[_nghost-%COMP%], .bs3.bs-tooltip-right[_nghost-%COMP%]{margin:0}.bs3.bs-tooltip-right[_nghost-%COMP%]   .arrow[_ngcontent-%COMP%], .bs3.bs-tooltip-left[_nghost-%COMP%]   .arrow[_ngcontent-%COMP%]{margin:.3rem 0}\"],\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TooltipContainerComponent, [{\n    type: Component,\n    args: [{\n      selector: 'bs-tooltip-container',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      // eslint-disable-next-line @angular-eslint/no-host-metadata-property\n      host: {\n        '[class]': '\"tooltip in tooltip-\" + placement + \" \" + \"bs-tooltip-\" + placement + \" \" + placement + \" \" + containerClass',\n        '[class.show]': '!_bsVersions.isBs3',\n        '[class.bs3]': '_bsVersions.isBs3',\n        '[attr.id]': 'this.id',\n        role: 'tooltip'\n      },\n      styles: [`\n    :host.tooltip {\n      display: block;\n      pointer-events: none;\n    }\n    :host.bs3.tooltip.top>.arrow {\n      margin-left: -2px;\n    }\n    :host.bs3.tooltip.bottom {\n      margin-top: 0px;\n    }\n    :host.bs3.bs-tooltip-left, :host.bs3.bs-tooltip-right{\n      margin: 0px;\n    }\n    :host.bs3.bs-tooltip-right .arrow, :host.bs3.bs-tooltip-left .arrow {\n      margin: .3rem 0;\n    }\n  `],\n      template: `\n    <div class=\"tooltip-arrow arrow\"></div>\n    <div class=\"tooltip-inner\"><ng-content></ng-content></div>\n    `\n    }]\n  }], function () {\n    return [{\n      type: TooltipConfig\n    }];\n  }, null);\n})();\n\nlet id = 0;\n\nclass TooltipDirective {\n  constructor(_viewContainerRef, cis, config, _elementRef, _renderer, _positionService) {\n    this._elementRef = _elementRef;\n    this._renderer = _renderer;\n    this._positionService = _positionService;\n    this.tooltipId = id++;\n    /** sets disable adaptive position */\n\n    this.adaptivePosition = true;\n    /** Fired when tooltip content changes */\n\n    this.tooltipChange = new EventEmitter();\n    /**\n     * Placement of a tooltip. Accepts: \"top\", \"bottom\", \"left\", \"right\"\n     */\n\n    this.placement = 'top';\n    /**\n     * Specifies events that should trigger. Supports a space separated list of\n     * event names.\n     */\n\n    this.triggers = 'hover focus';\n    /**\n     * Css class for tooltip container\n     */\n\n    this.containerClass = '';\n    /**\n     * Allows to disable tooltip\n     */\n\n    this.isDisabled = false;\n    /**\n     * Delay before showing the tooltip\n     */\n\n    this.delay = 0;\n    /** @deprecated - removed, will be added to configuration */\n\n    this.tooltipAnimation = true;\n    /** @deprecated */\n\n    this.tooltipFadeDuration = 150;\n    /** @deprecated */\n\n    this.tooltipStateChanged = new EventEmitter();\n    this._tooltip = cis.createLoader(this._elementRef, _viewContainerRef, this._renderer).provide({\n      provide: TooltipConfig,\n      useValue: config\n    });\n    Object.assign(this, config);\n    this.onShown = this._tooltip.onShown;\n    this.onHidden = this._tooltip.onHidden;\n  }\n  /**\n   * Returns whether or not the tooltip is currently being shown\n   */\n\n\n  get isOpen() {\n    return this._tooltip.isShown;\n  }\n\n  set isOpen(value) {\n    if (value) {\n      this.show();\n    } else {\n      this.hide();\n    }\n  }\n  /** @deprecated - please use `tooltip` instead */\n\n\n  set htmlContent(value) {\n    warnOnce('tooltipHtml was deprecated, please use `tooltip` instead');\n    this.tooltip = value;\n  }\n  /** @deprecated - please use `placement` instead */\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n\n\n  set _placement(value) {\n    warnOnce('tooltipPlacement was deprecated, please use `placement` instead');\n    this.placement = value;\n  }\n  /** @deprecated - please use `isOpen` instead */\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n\n\n  set _isOpen(value) {\n    warnOnce('tooltipIsOpen was deprecated, please use `isOpen` instead');\n    this.isOpen = value;\n  }\n\n  get _isOpen() {\n    warnOnce('tooltipIsOpen was deprecated, please use `isOpen` instead');\n    return this.isOpen;\n  }\n  /** @deprecated - please use `isDisabled` instead */\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n\n\n  set _enable(value) {\n    warnOnce('tooltipEnable was deprecated, please use `isDisabled` instead');\n    this.isDisabled = !value;\n  }\n\n  get _enable() {\n    warnOnce('tooltipEnable was deprecated, please use `isDisabled` instead');\n    return this.isDisabled;\n  }\n  /** @deprecated - please use `container=\"body\"` instead */\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n\n\n  set _appendToBody(value) {\n    warnOnce('tooltipAppendToBody was deprecated, please use `container=\"body\"` instead');\n    this.container = value ? 'body' : this.container;\n  }\n\n  get _appendToBody() {\n    warnOnce('tooltipAppendToBody was deprecated, please use `container=\"body\"` instead');\n    return this.container === 'body';\n  }\n  /** @deprecated - will replaced with customClass */\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n\n\n  set _popupClass(value) {\n    warnOnce('tooltipClass deprecated');\n  }\n  /** @deprecated - removed */\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n\n\n  set _tooltipContext(value) {\n    warnOnce('tooltipContext deprecated');\n  }\n  /** @deprecated */\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n\n\n  set _tooltipPopupDelay(value) {\n    warnOnce('tooltipPopupDelay is deprecated, use `delay` instead');\n    this.delay = value;\n  }\n  /** @deprecated -  please use `triggers` instead */\n\n\n  get _tooltipTrigger() {\n    warnOnce('tooltipTrigger was deprecated, please use `triggers` instead');\n    return this.triggers;\n  }\n\n  set _tooltipTrigger(value) {\n    warnOnce('tooltipTrigger was deprecated, please use `triggers` instead');\n    this.triggers = (value || '').toString();\n  }\n\n  ngOnInit() {\n    this._tooltip.listen({\n      triggers: this.triggers,\n      show: () => this.show()\n    });\n\n    this.tooltipChange.subscribe(value => {\n      if (!value) {\n        this._tooltip.hide();\n      }\n    });\n    this.onShown.subscribe(() => {\n      this.setAriaDescribedBy();\n    });\n    this.onHidden.subscribe(() => {\n      this.setAriaDescribedBy();\n    });\n  }\n\n  setAriaDescribedBy() {\n    this._ariaDescribedby = this.isOpen ? `tooltip-${this.tooltipId}` : void 0;\n\n    if (this._ariaDescribedby) {\n      this._renderer.setAttribute(this._elementRef.nativeElement, 'aria-describedby', this._ariaDescribedby);\n    } else {\n      this._renderer.removeAttribute(this._elementRef.nativeElement, 'aria-describedby');\n    }\n  }\n  /**\n   * Toggles an element’s tooltip. This is considered a “manual” triggering of\n   * the tooltip.\n   */\n\n\n  toggle() {\n    if (this.isOpen) {\n      return this.hide();\n    }\n\n    this.show();\n  }\n  /**\n   * Opens an element’s tooltip. This is considered a “manual” triggering of\n   * the tooltip.\n   */\n\n\n  show() {\n    this._positionService.setOptions({\n      modifiers: {\n        flip: {\n          enabled: this.adaptivePosition\n        },\n        preventOverflow: {\n          enabled: this.adaptivePosition,\n          boundariesElement: this.boundariesElement || 'scrollParent'\n        }\n      }\n    });\n\n    if (this.isOpen || this.isDisabled || this._delayTimeoutId || !this.tooltip) {\n      return;\n    }\n\n    const showTooltip = () => {\n      if (this._delayTimeoutId) {\n        this._delayTimeoutId = undefined;\n      }\n\n      this._tooltip.attach(TooltipContainerComponent).to(this.container).position({\n        attachment: this.placement\n      }).show({\n        content: this.tooltip,\n        placement: this.placement,\n        containerClass: this.containerClass,\n        id: `tooltip-${this.tooltipId}`\n      });\n    };\n\n    const cancelDelayedTooltipShowing = () => {\n      if (this._tooltipCancelShowFn) {\n        this._tooltipCancelShowFn();\n      }\n    };\n\n    if (this.delay) {\n      if (this._delaySubscription) {\n        this._delaySubscription.unsubscribe();\n      }\n\n      this._delaySubscription = timer(this.delay).subscribe(() => {\n        showTooltip();\n        cancelDelayedTooltipShowing();\n      });\n\n      if (this.triggers) {\n        parseTriggers(this.triggers).forEach(trigger => {\n          if (!trigger.close) {\n            return;\n          }\n\n          this._tooltipCancelShowFn = this._renderer.listen(this._elementRef.nativeElement, trigger.close, () => {\n            var _a;\n\n            (_a = this._delaySubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n            cancelDelayedTooltipShowing();\n          });\n        });\n      }\n    } else {\n      showTooltip();\n    }\n  }\n  /**\n   * Closes an element’s tooltip. This is considered a “manual” triggering of\n   * the tooltip.\n   */\n\n\n  hide() {\n    var _a;\n\n    if (this._delayTimeoutId) {\n      clearTimeout(this._delayTimeoutId);\n      this._delayTimeoutId = undefined;\n    }\n\n    if (!this._tooltip.isShown) {\n      return;\n    }\n\n    if ((_a = this._tooltip.instance) === null || _a === void 0 ? void 0 : _a.classMap) {\n      this._tooltip.instance.classMap[\"in\"] = false;\n    }\n\n    setTimeout(() => {\n      this._tooltip.hide();\n    }, this.tooltipFadeDuration);\n  }\n\n  ngOnDestroy() {\n    this._tooltip.dispose();\n\n    this.tooltipChange.unsubscribe();\n\n    if (this._delaySubscription) {\n      this._delaySubscription.unsubscribe();\n    }\n\n    this.onShown.unsubscribe();\n    this.onHidden.unsubscribe();\n  }\n\n}\n\nTooltipDirective.ɵfac = function TooltipDirective_Factory(t) {\n  return new (t || TooltipDirective)(i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i1.ComponentLoaderFactory), i0.ɵɵdirectiveInject(TooltipConfig), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i3.PositioningService));\n};\n\nTooltipDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: TooltipDirective,\n  selectors: [[\"\", \"tooltip\", \"\"], [\"\", \"tooltipHtml\", \"\"]],\n  inputs: {\n    adaptivePosition: \"adaptivePosition\",\n    tooltip: \"tooltip\",\n    placement: \"placement\",\n    triggers: \"triggers\",\n    container: \"container\",\n    containerClass: \"containerClass\",\n    boundariesElement: \"boundariesElement\",\n    isOpen: \"isOpen\",\n    isDisabled: \"isDisabled\",\n    delay: \"delay\",\n    htmlContent: [\"tooltipHtml\", \"htmlContent\"],\n    _placement: [\"tooltipPlacement\", \"_placement\"],\n    _isOpen: [\"tooltipIsOpen\", \"_isOpen\"],\n    _enable: [\"tooltipEnable\", \"_enable\"],\n    _appendToBody: [\"tooltipAppendToBody\", \"_appendToBody\"],\n    tooltipAnimation: \"tooltipAnimation\",\n    _popupClass: [\"tooltipClass\", \"_popupClass\"],\n    _tooltipContext: [\"tooltipContext\", \"_tooltipContext\"],\n    _tooltipPopupDelay: [\"tooltipPopupDelay\", \"_tooltipPopupDelay\"],\n    tooltipFadeDuration: \"tooltipFadeDuration\",\n    _tooltipTrigger: [\"tooltipTrigger\", \"_tooltipTrigger\"]\n  },\n  outputs: {\n    tooltipChange: \"tooltipChange\",\n    onShown: \"onShown\",\n    onHidden: \"onHidden\",\n    tooltipStateChanged: \"tooltipStateChanged\"\n  },\n  exportAs: [\"bs-tooltip\"]\n});\n\n__decorate([OnChange(), __metadata(\"design:type\", Object)], TooltipDirective.prototype, \"tooltip\", void 0);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TooltipDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[tooltip], [tooltipHtml]',\n      exportAs: 'bs-tooltip'\n    }]\n  }], function () {\n    return [{\n      type: i0.ViewContainerRef\n    }, {\n      type: i1.ComponentLoaderFactory\n    }, {\n      type: TooltipConfig\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.Renderer2\n    }, {\n      type: i3.PositioningService\n    }];\n  }, {\n    adaptivePosition: [{\n      type: Input\n    }],\n    tooltip: [{\n      type: Input\n    }],\n    tooltipChange: [{\n      type: Output\n    }],\n    placement: [{\n      type: Input\n    }],\n    triggers: [{\n      type: Input\n    }],\n    container: [{\n      type: Input\n    }],\n    containerClass: [{\n      type: Input\n    }],\n    boundariesElement: [{\n      type: Input\n    }],\n    isOpen: [{\n      type: Input\n    }],\n    isDisabled: [{\n      type: Input\n    }],\n    delay: [{\n      type: Input\n    }],\n    onShown: [{\n      type: Output\n    }],\n    onHidden: [{\n      type: Output\n    }],\n    htmlContent: [{\n      type: Input,\n      args: ['tooltipHtml']\n    }],\n    _placement: [{\n      type: Input,\n      args: ['tooltipPlacement']\n    }],\n    _isOpen: [{\n      type: Input,\n      args: ['tooltipIsOpen']\n    }],\n    _enable: [{\n      type: Input,\n      args: ['tooltipEnable']\n    }],\n    _appendToBody: [{\n      type: Input,\n      args: ['tooltipAppendToBody']\n    }],\n    tooltipAnimation: [{\n      type: Input\n    }],\n    _popupClass: [{\n      type: Input,\n      args: ['tooltipClass']\n    }],\n    _tooltipContext: [{\n      type: Input,\n      args: ['tooltipContext']\n    }],\n    _tooltipPopupDelay: [{\n      type: Input,\n      args: ['tooltipPopupDelay']\n    }],\n    tooltipFadeDuration: [{\n      type: Input\n    }],\n    _tooltipTrigger: [{\n      type: Input,\n      args: ['tooltipTrigger']\n    }],\n    tooltipStateChanged: [{\n      type: Output\n    }]\n  });\n})();\n\nclass TooltipModule {\n  static forRoot() {\n    return {\n      ngModule: TooltipModule,\n      providers: [ComponentLoaderFactory, PositioningService]\n    };\n  }\n\n}\n\nTooltipModule.ɵfac = function TooltipModule_Factory(t) {\n  return new (t || TooltipModule)();\n};\n\nTooltipModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: TooltipModule\n});\nTooltipModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TooltipModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: [TooltipDirective, TooltipContainerComponent],\n      exports: [TooltipDirective],\n      entryComponents: [TooltipContainerComponent]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { TooltipConfig, TooltipContainerComponent, TooltipDirective, TooltipModule };","map":{"version":3,"sources":["C:/Desktop/Estudos/ProEventosProj/ProEventosProj/front/proeventos-app/node_modules/ngx-bootstrap/tooltip/fesm2015/ngx-bootstrap-tooltip.mjs"],"names":["i0","Injectable","Component","ChangeDetectionStrategy","EventEmitter","Directive","Input","Output","NgModule","getBsVer","warnOnce","parseTriggers","OnChange","i3","PlacementForBs5","PositioningService","__decorate","__metadata","timer","i1","ComponentLoaderFactory","CommonModule","TooltipConfig","constructor","adaptivePosition","placement","triggers","delay","ɵfac","ɵprov","type","args","providedIn","TooltipContainerComponent","config","Object","assign","_bsVersions","ngAfterViewInit","classMap","in","fade","isBs5","animation","containerClass","ɵcmp","selector","changeDetection","OnPush","host","role","styles","template","id","TooltipDirective","_viewContainerRef","cis","_elementRef","_renderer","_positionService","tooltipId","tooltipChange","isDisabled","tooltipAnimation","tooltipFadeDuration","tooltipStateChanged","_tooltip","createLoader","provide","useValue","onShown","onHidden","isOpen","isShown","value","show","hide","htmlContent","tooltip","_placement","_isOpen","_enable","_appendToBody","container","_popupClass","_tooltipContext","_tooltipPopupDelay","_tooltipTrigger","toString","ngOnInit","listen","subscribe","setAriaDescribedBy","_ariaDescribedby","setAttribute","nativeElement","removeAttribute","toggle","setOptions","modifiers","flip","enabled","preventOverflow","boundariesElement","_delayTimeoutId","showTooltip","undefined","attach","to","position","attachment","content","cancelDelayedTooltipShowing","_tooltipCancelShowFn","_delaySubscription","unsubscribe","forEach","trigger","close","_a","clearTimeout","instance","setTimeout","ngOnDestroy","dispose","ViewContainerRef","ElementRef","Renderer2","ɵdir","prototype","exportAs","TooltipModule","forRoot","ngModule","providers","ɵmod","ɵinj","imports","declarations","exports","entryComponents"],"mappings":"AAAA,OAAO,KAAKA,EAAZ,MAAoB,eAApB;AACA,SAASC,UAAT,EAAqBC,SAArB,EAAgCC,uBAAhC,EAAyDC,YAAzD,EAAuEC,SAAvE,EAAkFC,KAAlF,EAAyFC,MAAzF,EAAiGC,QAAjG,QAAiH,eAAjH;AACA,SAASC,QAAT,EAAmBC,QAAnB,EAA6BC,aAA7B,EAA4CC,QAA5C,QAA4D,qBAA5D;AACA,OAAO,KAAKC,EAAZ,MAAoB,2BAApB;AACA,SAASC,eAAT,EAA0BC,kBAA1B,QAAoD,2BAApD;AACA,SAASC,UAAT,EAAqBC,UAArB,QAAuC,OAAvC;AACA,SAASC,KAAT,QAAsB,MAAtB;AACA,OAAO,KAAKC,EAAZ,MAAoB,gCAApB;AACA,SAASC,sBAAT,QAAuC,gCAAvC;AACA,SAASC,YAAT,QAA6B,iBAA7B;AAEA;;;;AACA,MAAMC,aAAN,CAAoB;AAChBC,EAAAA,WAAW,GAAG;AACV;AACA,SAAKC,gBAAL,GAAwB,IAAxB;AACA;;AACA,SAAKC,SAAL,GAAiB,KAAjB;AACA;;AACA,SAAKC,QAAL,GAAgB,aAAhB;AACA;;AACA,SAAKC,KAAL,GAAa,CAAb;AACH;;AAVe;;AAYpBL,aAAa,CAACM,IAAd;AAAA,mBAA0GN,aAA1G;AAAA;;AACAA,aAAa,CAACO,KAAd,kBADgG7B,EAChG;AAAA,SAA8GsB,aAA9G;AAAA,WAA8GA,aAA9G;AAAA,cAAyI;AAAzI;;AACA;AAAA,qDAFgGtB,EAEhG,mBAA2FsB,aAA3F,EAAsH,CAAC;AAC3GQ,IAAAA,IAAI,EAAE7B,UADqG;AAE3G8B,IAAAA,IAAI,EAAE,CAAC;AAAEC,MAAAA,UAAU,EAAE;AAAd,KAAD;AAFqG,GAAD,CAAtH;AAAA;;AAKA,MAAMC,yBAAN,CAAgC;AAC5BV,EAAAA,WAAW,CAACW,MAAD,EAAS;AAChBC,IAAAA,MAAM,CAACC,MAAP,CAAc,IAAd,EAAoBF,MAApB;AACH;;AACc,MAAXG,WAAW,GAAG;AACd,WAAO5B,QAAQ,EAAf;AACH;;AACD6B,EAAAA,eAAe,GAAG;AACd,SAAKC,QAAL,GAAgB;AAAEC,MAAAA,EAAE,EAAE,KAAN;AAAaC,MAAAA,IAAI,EAAE;AAAnB,KAAhB;;AACA,QAAI,KAAKhB,SAAT,EAAoB;AAChB,UAAI,KAAKY,WAAL,CAAiBK,KAArB,EAA4B;AACxB,aAAKjB,SAAL,GAAiBX,eAAe,CAAC,KAAKW,SAAN,CAAhC;AACH;;AACD,WAAKc,QAAL,CAAc,KAAKd,SAAnB,IAAgC,IAAhC;AACH;;AACD,SAAKc,QAAL,CAAe,WAAU,KAAKd,SAAU,EAAxC,IAA6C,IAA7C;AACA,SAAKc,QAAL,CAAc,IAAd,IAAsB,IAAtB;;AACA,QAAI,KAAKI,SAAT,EAAoB;AAChB,WAAKJ,QAAL,CAAc,MAAd,IAAwB,IAAxB;AACH;;AACD,QAAI,KAAKK,cAAT,EAAyB;AACrB,WAAKL,QAAL,CAAc,KAAKK,cAAnB,IAAqC,IAArC;AACH;AACJ;;AAvB2B;;AAyBhCX,yBAAyB,CAACL,IAA1B;AAAA,mBAAsHK,yBAAtH,EAhCgGjC,EAgChG,mBAAiKsB,aAAjK;AAAA;;AACAW,yBAAyB,CAACY,IAA1B,kBAjCgG7C,EAiChG;AAAA,QAA0GiC,yBAA1G;AAAA;AAAA,sBAAqM,SAArM;AAAA;AAAA;AAAA;AAjCgGjC,MAAAA,EAiChG;AAjCgGA,MAAAA,EAiChG;AAjCgGA,MAAAA,EAiChG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAjCgGA,MAAAA,EAiChG;AAjCgGA,MAAAA,EAkC5F,uBADJ;AAjCgGA,MAAAA,EAmC5F,4BAFJ;AAjCgGA,MAAAA,EAmCjE,gBAF/B;AAjCgGA,MAAAA,EAmCxC,eAFxD;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA;AAAA,qDArCgGA,EAqChG,mBAA2FiC,yBAA3F,EAAkI,CAAC;AACvHH,IAAAA,IAAI,EAAE5B,SADiH;AAEvH6B,IAAAA,IAAI,EAAE,CAAC;AACCe,MAAAA,QAAQ,EAAE,sBADX;AAECC,MAAAA,eAAe,EAAE5C,uBAAuB,CAAC6C,MAF1C;AAGC;AACAC,MAAAA,IAAI,EAAE;AACF,mBAAW,8GADT;AAEF,wBAAgB,oBAFd;AAGF,uBAAe,mBAHb;AAIF,qBAAa,SAJX;AAKFC,QAAAA,IAAI,EAAE;AALJ,OAJP;AAWCC,MAAAA,MAAM,EAAE,CACH;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAlB4B,CAXT;AA+BCC,MAAAA,QAAQ,EAAG;AAC/B;AACA;AACA;AAlCmB,KAAD;AAFiH,GAAD,CAAlI,EAsC4B,YAAY;AAAE,WAAO,CAAC;AAAEtB,MAAAA,IAAI,EAAER;AAAR,KAAD,CAAP;AAAmC,GAtC7E;AAAA;;AAwCA,IAAI+B,EAAE,GAAG,CAAT;;AACA,MAAMC,gBAAN,CAAuB;AACnB/B,EAAAA,WAAW,CAACgC,iBAAD,EAAoBC,GAApB,EAAyBtB,MAAzB,EAAiCuB,WAAjC,EAA8CC,SAA9C,EAAyDC,gBAAzD,EAA2E;AAClF,SAAKF,WAAL,GAAmBA,WAAnB;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKC,gBAAL,GAAwBA,gBAAxB;AACA,SAAKC,SAAL,GAAiBP,EAAE,EAAnB;AACA;;AACA,SAAK7B,gBAAL,GAAwB,IAAxB;AACA;;AACA,SAAKqC,aAAL,GAAqB,IAAIzD,YAAJ,EAArB;AACA;AACR;AACA;;AACQ,SAAKqB,SAAL,GAAiB,KAAjB;AACA;AACR;AACA;AACA;;AACQ,SAAKC,QAAL,GAAgB,aAAhB;AACA;AACR;AACA;;AACQ,SAAKkB,cAAL,GAAsB,EAAtB;AACA;AACR;AACA;;AACQ,SAAKkB,UAAL,GAAkB,KAAlB;AACA;AACR;AACA;;AACQ,SAAKnC,KAAL,GAAa,CAAb;AACA;;AACA,SAAKoC,gBAAL,GAAwB,IAAxB;AACA;;AACA,SAAKC,mBAAL,GAA2B,GAA3B;AACA;;AACA,SAAKC,mBAAL,GAA2B,IAAI7D,YAAJ,EAA3B;AACA,SAAK8D,QAAL,GAAgBV,GAAG,CACdW,YADW,CACE,KAAKV,WADP,EACoBF,iBADpB,EACuC,KAAKG,SAD5C,EAEXU,OAFW,CAEH;AAAEA,MAAAA,OAAO,EAAE9C,aAAX;AAA0B+C,MAAAA,QAAQ,EAAEnC;AAApC,KAFG,CAAhB;AAGAC,IAAAA,MAAM,CAACC,MAAP,CAAc,IAAd,EAAoBF,MAApB;AACA,SAAKoC,OAAL,GAAe,KAAKJ,QAAL,CAAcI,OAA7B;AACA,SAAKC,QAAL,GAAgB,KAAKL,QAAL,CAAcK,QAA9B;AACH;AACD;AACJ;AACA;;;AACc,MAANC,MAAM,GAAG;AACT,WAAO,KAAKN,QAAL,CAAcO,OAArB;AACH;;AACS,MAAND,MAAM,CAACE,KAAD,EAAQ;AACd,QAAIA,KAAJ,EAAW;AACP,WAAKC,IAAL;AACH,KAFD,MAGK;AACD,WAAKC,IAAL;AACH;AACJ;AACD;;;AACe,MAAXC,WAAW,CAACH,KAAD,EAAQ;AACnBhE,IAAAA,QAAQ,CAAC,0DAAD,CAAR;AACA,SAAKoE,OAAL,GAAeJ,KAAf;AACH;AACD;AACA;;;AACc,MAAVK,UAAU,CAACL,KAAD,EAAQ;AAClBhE,IAAAA,QAAQ,CAAC,iEAAD,CAAR;AACA,SAAKe,SAAL,GAAiBiD,KAAjB;AACH;AACD;AACA;;;AACW,MAAPM,OAAO,CAACN,KAAD,EAAQ;AACfhE,IAAAA,QAAQ,CAAC,2DAAD,CAAR;AACA,SAAK8D,MAAL,GAAcE,KAAd;AACH;;AACU,MAAPM,OAAO,GAAG;AACVtE,IAAAA,QAAQ,CAAC,2DAAD,CAAR;AACA,WAAO,KAAK8D,MAAZ;AACH;AACD;AACA;;;AACW,MAAPS,OAAO,CAACP,KAAD,EAAQ;AACfhE,IAAAA,QAAQ,CAAC,+DAAD,CAAR;AACA,SAAKoD,UAAL,GAAkB,CAACY,KAAnB;AACH;;AACU,MAAPO,OAAO,GAAG;AACVvE,IAAAA,QAAQ,CAAC,+DAAD,CAAR;AACA,WAAO,KAAKoD,UAAZ;AACH;AACD;AACA;;;AACiB,MAAboB,aAAa,CAACR,KAAD,EAAQ;AACrBhE,IAAAA,QAAQ,CAAC,2EAAD,CAAR;AACA,SAAKyE,SAAL,GAAiBT,KAAK,GAAG,MAAH,GAAY,KAAKS,SAAvC;AACH;;AACgB,MAAbD,aAAa,GAAG;AAChBxE,IAAAA,QAAQ,CAAC,2EAAD,CAAR;AACA,WAAO,KAAKyE,SAAL,KAAmB,MAA1B;AACH;AACD;AACA;;;AACe,MAAXC,WAAW,CAACV,KAAD,EAAQ;AACnBhE,IAAAA,QAAQ,CAAC,yBAAD,CAAR;AACH;AACD;AACA;;;AACmB,MAAf2E,eAAe,CAACX,KAAD,EAAQ;AACvBhE,IAAAA,QAAQ,CAAC,2BAAD,CAAR;AACH;AACD;AACA;;;AACsB,MAAlB4E,kBAAkB,CAACZ,KAAD,EAAQ;AAC1BhE,IAAAA,QAAQ,CAAC,sDAAD,CAAR;AACA,SAAKiB,KAAL,GAAa+C,KAAb;AACH;AACD;;;AACmB,MAAfa,eAAe,GAAG;AAClB7E,IAAAA,QAAQ,CAAC,8DAAD,CAAR;AACA,WAAO,KAAKgB,QAAZ;AACH;;AACkB,MAAf6D,eAAe,CAACb,KAAD,EAAQ;AACvBhE,IAAAA,QAAQ,CAAC,8DAAD,CAAR;AACA,SAAKgB,QAAL,GAAgB,CAACgD,KAAK,IAAI,EAAV,EAAcc,QAAd,EAAhB;AACH;;AACDC,EAAAA,QAAQ,GAAG;AACP,SAAKvB,QAAL,CAAcwB,MAAd,CAAqB;AACjBhE,MAAAA,QAAQ,EAAE,KAAKA,QADE;AAEjBiD,MAAAA,IAAI,EAAE,MAAM,KAAKA,IAAL;AAFK,KAArB;;AAIA,SAAKd,aAAL,CAAmB8B,SAAnB,CAA8BjB,KAAD,IAAW;AACpC,UAAI,CAACA,KAAL,EAAY;AACR,aAAKR,QAAL,CAAcU,IAAd;AACH;AACJ,KAJD;AAKA,SAAKN,OAAL,CAAaqB,SAAb,CAAuB,MAAM;AACzB,WAAKC,kBAAL;AACH,KAFD;AAGA,SAAKrB,QAAL,CAAcoB,SAAd,CAAwB,MAAM;AAC1B,WAAKC,kBAAL;AACH,KAFD;AAGH;;AACDA,EAAAA,kBAAkB,GAAG;AACjB,SAAKC,gBAAL,GAAwB,KAAKrB,MAAL,GAAe,WAAU,KAAKZ,SAAU,EAAxC,GAA4C,KAAK,CAAzE;;AACA,QAAI,KAAKiC,gBAAT,EAA2B;AACvB,WAAKnC,SAAL,CAAeoC,YAAf,CAA4B,KAAKrC,WAAL,CAAiBsC,aAA7C,EAA4D,kBAA5D,EAAgF,KAAKF,gBAArF;AACH,KAFD,MAGK;AACD,WAAKnC,SAAL,CAAesC,eAAf,CAA+B,KAAKvC,WAAL,CAAiBsC,aAAhD,EAA+D,kBAA/D;AACH;AACJ;AACD;AACJ;AACA;AACA;;;AACIE,EAAAA,MAAM,GAAG;AACL,QAAI,KAAKzB,MAAT,EAAiB;AACb,aAAO,KAAKI,IAAL,EAAP;AACH;;AACD,SAAKD,IAAL;AACH;AACD;AACJ;AACA;AACA;;;AACIA,EAAAA,IAAI,GAAG;AACH,SAAKhB,gBAAL,CAAsBuC,UAAtB,CAAiC;AAC7BC,MAAAA,SAAS,EAAE;AACPC,QAAAA,IAAI,EAAE;AACFC,UAAAA,OAAO,EAAE,KAAK7E;AADZ,SADC;AAIP8E,QAAAA,eAAe,EAAE;AACbD,UAAAA,OAAO,EAAE,KAAK7E,gBADD;AAEb+E,UAAAA,iBAAiB,EAAE,KAAKA,iBAAL,IAA0B;AAFhC;AAJV;AADkB,KAAjC;;AAWA,QAAI,KAAK/B,MAAL,IACA,KAAKV,UADL,IAEA,KAAK0C,eAFL,IAGA,CAAC,KAAK1B,OAHV,EAGmB;AACf;AACH;;AACD,UAAM2B,WAAW,GAAG,MAAM;AACtB,UAAI,KAAKD,eAAT,EAA0B;AACtB,aAAKA,eAAL,GAAuBE,SAAvB;AACH;;AACD,WAAKxC,QAAL,CACKyC,MADL,CACY1E,yBADZ,EAEK2E,EAFL,CAEQ,KAAKzB,SAFb,EAGK0B,QAHL,CAGc;AAAEC,QAAAA,UAAU,EAAE,KAAKrF;AAAnB,OAHd,EAIKkD,IAJL,CAIU;AACNoC,QAAAA,OAAO,EAAE,KAAKjC,OADR;AAENrD,QAAAA,SAAS,EAAE,KAAKA,SAFV;AAGNmB,QAAAA,cAAc,EAAE,KAAKA,cAHf;AAINS,QAAAA,EAAE,EAAG,WAAU,KAAKO,SAAU;AAJxB,OAJV;AAUH,KAdD;;AAeA,UAAMoD,2BAA2B,GAAG,MAAM;AACtC,UAAI,KAAKC,oBAAT,EAA+B;AAC3B,aAAKA,oBAAL;AACH;AACJ,KAJD;;AAKA,QAAI,KAAKtF,KAAT,EAAgB;AACZ,UAAI,KAAKuF,kBAAT,EAA6B;AACzB,aAAKA,kBAAL,CAAwBC,WAAxB;AACH;;AACD,WAAKD,kBAAL,GAA0BhG,KAAK,CAAC,KAAKS,KAAN,CAAL,CAAkBgE,SAAlB,CAA4B,MAAM;AACxDc,QAAAA,WAAW;AACXO,QAAAA,2BAA2B;AAC9B,OAHyB,CAA1B;;AAIA,UAAI,KAAKtF,QAAT,EAAmB;AACff,QAAAA,aAAa,CAAC,KAAKe,QAAN,CAAb,CACK0F,OADL,CACcC,OAAD,IAAa;AACtB,cAAI,CAACA,OAAO,CAACC,KAAb,EAAoB;AAChB;AACH;;AACD,eAAKL,oBAAL,GAA4B,KAAKvD,SAAL,CAAegC,MAAf,CAAsB,KAAKjC,WAAL,CAAiBsC,aAAvC,EAAsDsB,OAAO,CAACC,KAA9D,EAAqE,MAAM;AACnG,gBAAIC,EAAJ;;AACA,aAACA,EAAE,GAAG,KAAKL,kBAAX,MAAmC,IAAnC,IAA2CK,EAAE,KAAK,KAAK,CAAvD,GAA2D,KAAK,CAAhE,GAAoEA,EAAE,CAACJ,WAAH,EAApE;AACAH,YAAAA,2BAA2B;AAC9B,WAJ2B,CAA5B;AAKH,SAVD;AAWH;AACJ,KArBD,MAsBK;AACDP,MAAAA,WAAW;AACd;AACJ;AACD;AACJ;AACA;AACA;;;AACI7B,EAAAA,IAAI,GAAG;AACH,QAAI2C,EAAJ;;AACA,QAAI,KAAKf,eAAT,EAA0B;AACtBgB,MAAAA,YAAY,CAAC,KAAKhB,eAAN,CAAZ;AACA,WAAKA,eAAL,GAAuBE,SAAvB;AACH;;AACD,QAAI,CAAC,KAAKxC,QAAL,CAAcO,OAAnB,EAA4B;AACxB;AACH;;AACD,QAAI,CAAC8C,EAAE,GAAG,KAAKrD,QAAL,CAAcuD,QAApB,MAAkC,IAAlC,IAA0CF,EAAE,KAAK,KAAK,CAAtD,GAA0D,KAAK,CAA/D,GAAmEA,EAAE,CAAChF,QAA1E,EAAoF;AAChF,WAAK2B,QAAL,CAAcuD,QAAd,CAAuBlF,QAAvB,CAAgC,IAAhC,IAAwC,KAAxC;AACH;;AACDmF,IAAAA,UAAU,CAAC,MAAM;AACb,WAAKxD,QAAL,CAAcU,IAAd;AACH,KAFS,EAEP,KAAKZ,mBAFE,CAAV;AAGH;;AACD2D,EAAAA,WAAW,GAAG;AACV,SAAKzD,QAAL,CAAc0D,OAAd;;AACA,SAAK/D,aAAL,CAAmBsD,WAAnB;;AACA,QAAI,KAAKD,kBAAT,EAA6B;AACzB,WAAKA,kBAAL,CAAwBC,WAAxB;AACH;;AACD,SAAK7C,OAAL,CAAa6C,WAAb;AACA,SAAK5C,QAAL,CAAc4C,WAAd;AACH;;AAhQkB;;AAkQvB7D,gBAAgB,CAAC1B,IAAjB;AAAA,mBAA6G0B,gBAA7G,EAhVgGtD,EAgVhG,mBAA+IA,EAAE,CAAC6H,gBAAlJ,GAhVgG7H,EAgVhG,mBAA+KmB,EAAE,CAACC,sBAAlL,GAhVgGpB,EAgVhG,mBAAqNsB,aAArN,GAhVgGtB,EAgVhG,mBAA+OA,EAAE,CAAC8H,UAAlP,GAhVgG9H,EAgVhG,mBAAyQA,EAAE,CAAC+H,SAA5Q,GAhVgG/H,EAgVhG,mBAAkSa,EAAE,CAACE,kBAArS;AAAA;;AACAuC,gBAAgB,CAAC0E,IAAjB,kBAjVgGhI,EAiVhG;AAAA,QAAiGsD,gBAAjG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACAtC,UAAU,CAAC,CACPJ,QAAQ,EADD,EAEPK,UAAU,CAAC,aAAD,EAAgBkB,MAAhB,CAFH,CAAD,EAGPmB,gBAAgB,CAAC2E,SAHV,EAGqB,SAHrB,EAGgC,KAAK,CAHrC,CAAV;;AAIA;AAAA,qDAtVgGjI,EAsVhG,mBAA2FsD,gBAA3F,EAAyH,CAAC;AAC9GxB,IAAAA,IAAI,EAAEzB,SADwG;AAE9G0B,IAAAA,IAAI,EAAE,CAAC;AACCe,MAAAA,QAAQ,EAAE,0BADX;AAECoF,MAAAA,QAAQ,EAAE;AAFX,KAAD;AAFwG,GAAD,CAAzH,EAM4B,YAAY;AAAE,WAAO,CAAC;AAAEpG,MAAAA,IAAI,EAAE9B,EAAE,CAAC6H;AAAX,KAAD,EAAgC;AAAE/F,MAAAA,IAAI,EAAEX,EAAE,CAACC;AAAX,KAAhC,EAAqE;AAAEU,MAAAA,IAAI,EAAER;AAAR,KAArE,EAA8F;AAAEQ,MAAAA,IAAI,EAAE9B,EAAE,CAAC8H;AAAX,KAA9F,EAAuH;AAAEhG,MAAAA,IAAI,EAAE9B,EAAE,CAAC+H;AAAX,KAAvH,EAA+I;AAAEjG,MAAAA,IAAI,EAAEjB,EAAE,CAACE;AAAX,KAA/I,CAAP;AAAyL,GANnO,EAMqP;AAAES,IAAAA,gBAAgB,EAAE,CAAC;AAC1PM,MAAAA,IAAI,EAAExB;AADoP,KAAD,CAApB;AAErOwE,IAAAA,OAAO,EAAE,CAAC;AACVhD,MAAAA,IAAI,EAAExB;AADI,KAAD,CAF4N;AAIrOuD,IAAAA,aAAa,EAAE,CAAC;AAChB/B,MAAAA,IAAI,EAAEvB;AADU,KAAD,CAJsN;AAMrOkB,IAAAA,SAAS,EAAE,CAAC;AACZK,MAAAA,IAAI,EAAExB;AADM,KAAD,CAN0N;AAQrOoB,IAAAA,QAAQ,EAAE,CAAC;AACXI,MAAAA,IAAI,EAAExB;AADK,KAAD,CAR2N;AAUrO6E,IAAAA,SAAS,EAAE,CAAC;AACZrD,MAAAA,IAAI,EAAExB;AADM,KAAD,CAV0N;AAYrOsC,IAAAA,cAAc,EAAE,CAAC;AACjBd,MAAAA,IAAI,EAAExB;AADW,KAAD,CAZqN;AAcrOiG,IAAAA,iBAAiB,EAAE,CAAC;AACpBzE,MAAAA,IAAI,EAAExB;AADc,KAAD,CAdkN;AAgBrOkE,IAAAA,MAAM,EAAE,CAAC;AACT1C,MAAAA,IAAI,EAAExB;AADG,KAAD,CAhB6N;AAkBrOwD,IAAAA,UAAU,EAAE,CAAC;AACbhC,MAAAA,IAAI,EAAExB;AADO,KAAD,CAlByN;AAoBrOqB,IAAAA,KAAK,EAAE,CAAC;AACRG,MAAAA,IAAI,EAAExB;AADE,KAAD,CApB8N;AAsBrOgE,IAAAA,OAAO,EAAE,CAAC;AACVxC,MAAAA,IAAI,EAAEvB;AADI,KAAD,CAtB4N;AAwBrOgE,IAAAA,QAAQ,EAAE,CAAC;AACXzC,MAAAA,IAAI,EAAEvB;AADK,KAAD,CAxB2N;AA0BrOsE,IAAAA,WAAW,EAAE,CAAC;AACd/C,MAAAA,IAAI,EAAExB,KADQ;AAEdyB,MAAAA,IAAI,EAAE,CAAC,aAAD;AAFQ,KAAD,CA1BwN;AA6BrOgD,IAAAA,UAAU,EAAE,CAAC;AACbjD,MAAAA,IAAI,EAAExB,KADO;AAEbyB,MAAAA,IAAI,EAAE,CAAC,kBAAD;AAFO,KAAD,CA7ByN;AAgCrOiD,IAAAA,OAAO,EAAE,CAAC;AACVlD,MAAAA,IAAI,EAAExB,KADI;AAEVyB,MAAAA,IAAI,EAAE,CAAC,eAAD;AAFI,KAAD,CAhC4N;AAmCrOkD,IAAAA,OAAO,EAAE,CAAC;AACVnD,MAAAA,IAAI,EAAExB,KADI;AAEVyB,MAAAA,IAAI,EAAE,CAAC,eAAD;AAFI,KAAD,CAnC4N;AAsCrOmD,IAAAA,aAAa,EAAE,CAAC;AAChBpD,MAAAA,IAAI,EAAExB,KADU;AAEhByB,MAAAA,IAAI,EAAE,CAAC,qBAAD;AAFU,KAAD,CAtCsN;AAyCrOgC,IAAAA,gBAAgB,EAAE,CAAC;AACnBjC,MAAAA,IAAI,EAAExB;AADa,KAAD,CAzCmN;AA2CrO8E,IAAAA,WAAW,EAAE,CAAC;AACdtD,MAAAA,IAAI,EAAExB,KADQ;AAEdyB,MAAAA,IAAI,EAAE,CAAC,cAAD;AAFQ,KAAD,CA3CwN;AA8CrOsD,IAAAA,eAAe,EAAE,CAAC;AAClBvD,MAAAA,IAAI,EAAExB,KADY;AAElByB,MAAAA,IAAI,EAAE,CAAC,gBAAD;AAFY,KAAD,CA9CoN;AAiDrOuD,IAAAA,kBAAkB,EAAE,CAAC;AACrBxD,MAAAA,IAAI,EAAExB,KADe;AAErByB,MAAAA,IAAI,EAAE,CAAC,mBAAD;AAFe,KAAD,CAjDiN;AAoDrOiC,IAAAA,mBAAmB,EAAE,CAAC;AACtBlC,MAAAA,IAAI,EAAExB;AADgB,KAAD,CApDgN;AAsDrOiF,IAAAA,eAAe,EAAE,CAAC;AAClBzD,MAAAA,IAAI,EAAExB,KADY;AAElByB,MAAAA,IAAI,EAAE,CAAC,gBAAD;AAFY,KAAD,CAtDoN;AAyDrOkC,IAAAA,mBAAmB,EAAE,CAAC;AACtBnC,MAAAA,IAAI,EAAEvB;AADgB,KAAD;AAzDgN,GANrP;AAAA;;AAmEA,MAAM4H,aAAN,CAAoB;AACF,SAAPC,OAAO,GAAG;AACb,WAAO;AACHC,MAAAA,QAAQ,EAAEF,aADP;AAEHG,MAAAA,SAAS,EAAE,CAAClH,sBAAD,EAAyBL,kBAAzB;AAFR,KAAP;AAIH;;AANe;;AAQpBoH,aAAa,CAACvG,IAAd;AAAA,mBAA0GuG,aAA1G;AAAA;;AACAA,aAAa,CAACI,IAAd,kBAlagGvI,EAkahG;AAAA,QAA2GmI;AAA3G;AACAA,aAAa,CAACK,IAAd,kBAnagGxI,EAmahG;AAAA,YAAoI,CAACqB,YAAD,CAApI;AAAA;;AACA;AAAA,qDApagGrB,EAoahG,mBAA2FmI,aAA3F,EAAsH,CAAC;AAC3GrG,IAAAA,IAAI,EAAEtB,QADqG;AAE3GuB,IAAAA,IAAI,EAAE,CAAC;AACC0G,MAAAA,OAAO,EAAE,CAACpH,YAAD,CADV;AAECqH,MAAAA,YAAY,EAAE,CAACpF,gBAAD,EAAmBrB,yBAAnB,CAFf;AAGC0G,MAAAA,OAAO,EAAE,CAACrF,gBAAD,CAHV;AAICsF,MAAAA,eAAe,EAAE,CAAC3G,yBAAD;AAJlB,KAAD;AAFqG,GAAD,CAAtH;AAAA;AAUA;AACA;AACA;;;AAEA,SAASX,aAAT,EAAwBW,yBAAxB,EAAmDqB,gBAAnD,EAAqE6E,aAArE","sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, Component, ChangeDetectionStrategy, EventEmitter, Directive, Input, Output, NgModule } from '@angular/core';\nimport { getBsVer, warnOnce, parseTriggers, OnChange } from 'ngx-bootstrap/utils';\nimport * as i3 from 'ngx-bootstrap/positioning';\nimport { PlacementForBs5, PositioningService } from 'ngx-bootstrap/positioning';\nimport { __decorate, __metadata } from 'tslib';\nimport { timer } from 'rxjs';\nimport * as i1 from 'ngx-bootstrap/component-loader';\nimport { ComponentLoaderFactory } from 'ngx-bootstrap/component-loader';\nimport { CommonModule } from '@angular/common';\n\n/** Default values provider for tooltip */\nclass TooltipConfig {\n    constructor() {\n        /** sets disable adaptive position */\n        this.adaptivePosition = true;\n        /** tooltip placement, supported positions: 'top', 'bottom', 'left', 'right' */\n        this.placement = 'top';\n        /** array of event names which triggers tooltip opening */\n        this.triggers = 'hover focus';\n        /** delay before showing the tooltip */\n        this.delay = 0;\n    }\n}\nTooltipConfig.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: TooltipConfig, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nTooltipConfig.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: TooltipConfig, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: TooltipConfig, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n\nclass TooltipContainerComponent {\n    constructor(config) {\n        Object.assign(this, config);\n    }\n    get _bsVersions() {\n        return getBsVer();\n    }\n    ngAfterViewInit() {\n        this.classMap = { in: false, fade: false };\n        if (this.placement) {\n            if (this._bsVersions.isBs5) {\n                this.placement = PlacementForBs5[this.placement];\n            }\n            this.classMap[this.placement] = true;\n        }\n        this.classMap[`tooltip-${this.placement}`] = true;\n        this.classMap[\"in\"] = true;\n        if (this.animation) {\n            this.classMap[\"fade\"] = true;\n        }\n        if (this.containerClass) {\n            this.classMap[this.containerClass] = true;\n        }\n    }\n}\nTooltipContainerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: TooltipContainerComponent, deps: [{ token: TooltipConfig }], target: i0.ɵɵFactoryTarget.Component });\nTooltipContainerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.1\", type: TooltipContainerComponent, selector: \"bs-tooltip-container\", host: { attributes: { \"role\": \"tooltip\" }, properties: { \"class\": \"\\\"tooltip in tooltip-\\\" + placement + \\\" \\\" + \\\"bs-tooltip-\\\" + placement + \\\" \\\" + placement + \\\" \\\" + containerClass\", \"class.show\": \"!_bsVersions.isBs3\", \"class.bs3\": \"_bsVersions.isBs3\", \"attr.id\": \"this.id\" } }, ngImport: i0, template: `\n    <div class=\"tooltip-arrow arrow\"></div>\n    <div class=\"tooltip-inner\"><ng-content></ng-content></div>\n    `, isInline: true, styles: [\":host.tooltip{display:block;pointer-events:none}:host.bs3.tooltip.top>.arrow{margin-left:-2px}:host.bs3.tooltip.bottom{margin-top:0}:host.bs3.bs-tooltip-left,:host.bs3.bs-tooltip-right{margin:0}:host.bs3.bs-tooltip-right .arrow,:host.bs3.bs-tooltip-left .arrow{margin:.3rem 0}\\n\"], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: TooltipContainerComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'bs-tooltip-container',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    // eslint-disable-next-line @angular-eslint/no-host-metadata-property\n                    host: {\n                        '[class]': '\"tooltip in tooltip-\" + placement + \" \" + \"bs-tooltip-\" + placement + \" \" + placement + \" \" + containerClass',\n                        '[class.show]': '!_bsVersions.isBs3',\n                        '[class.bs3]': '_bsVersions.isBs3',\n                        '[attr.id]': 'this.id',\n                        role: 'tooltip'\n                    },\n                    styles: [\n                        `\n    :host.tooltip {\n      display: block;\n      pointer-events: none;\n    }\n    :host.bs3.tooltip.top>.arrow {\n      margin-left: -2px;\n    }\n    :host.bs3.tooltip.bottom {\n      margin-top: 0px;\n    }\n    :host.bs3.bs-tooltip-left, :host.bs3.bs-tooltip-right{\n      margin: 0px;\n    }\n    :host.bs3.bs-tooltip-right .arrow, :host.bs3.bs-tooltip-left .arrow {\n      margin: .3rem 0;\n    }\n  `\n                    ],\n                    template: `\n    <div class=\"tooltip-arrow arrow\"></div>\n    <div class=\"tooltip-inner\"><ng-content></ng-content></div>\n    `\n                }]\n        }], ctorParameters: function () { return [{ type: TooltipConfig }]; } });\n\nlet id = 0;\nclass TooltipDirective {\n    constructor(_viewContainerRef, cis, config, _elementRef, _renderer, _positionService) {\n        this._elementRef = _elementRef;\n        this._renderer = _renderer;\n        this._positionService = _positionService;\n        this.tooltipId = id++;\n        /** sets disable adaptive position */\n        this.adaptivePosition = true;\n        /** Fired when tooltip content changes */\n        this.tooltipChange = new EventEmitter();\n        /**\n         * Placement of a tooltip. Accepts: \"top\", \"bottom\", \"left\", \"right\"\n         */\n        this.placement = 'top';\n        /**\n         * Specifies events that should trigger. Supports a space separated list of\n         * event names.\n         */\n        this.triggers = 'hover focus';\n        /**\n         * Css class for tooltip container\n         */\n        this.containerClass = '';\n        /**\n         * Allows to disable tooltip\n         */\n        this.isDisabled = false;\n        /**\n         * Delay before showing the tooltip\n         */\n        this.delay = 0;\n        /** @deprecated - removed, will be added to configuration */\n        this.tooltipAnimation = true;\n        /** @deprecated */\n        this.tooltipFadeDuration = 150;\n        /** @deprecated */\n        this.tooltipStateChanged = new EventEmitter();\n        this._tooltip = cis\n            .createLoader(this._elementRef, _viewContainerRef, this._renderer)\n            .provide({ provide: TooltipConfig, useValue: config });\n        Object.assign(this, config);\n        this.onShown = this._tooltip.onShown;\n        this.onHidden = this._tooltip.onHidden;\n    }\n    /**\n     * Returns whether or not the tooltip is currently being shown\n     */\n    get isOpen() {\n        return this._tooltip.isShown;\n    }\n    set isOpen(value) {\n        if (value) {\n            this.show();\n        }\n        else {\n            this.hide();\n        }\n    }\n    /** @deprecated - please use `tooltip` instead */\n    set htmlContent(value) {\n        warnOnce('tooltipHtml was deprecated, please use `tooltip` instead');\n        this.tooltip = value;\n    }\n    /** @deprecated - please use `placement` instead */\n    // eslint-disable-next-line @angular-eslint/no-input-rename\n    set _placement(value) {\n        warnOnce('tooltipPlacement was deprecated, please use `placement` instead');\n        this.placement = value;\n    }\n    /** @deprecated - please use `isOpen` instead */\n    // eslint-disable-next-line @angular-eslint/no-input-rename\n    set _isOpen(value) {\n        warnOnce('tooltipIsOpen was deprecated, please use `isOpen` instead');\n        this.isOpen = value;\n    }\n    get _isOpen() {\n        warnOnce('tooltipIsOpen was deprecated, please use `isOpen` instead');\n        return this.isOpen;\n    }\n    /** @deprecated - please use `isDisabled` instead */\n    // eslint-disable-next-line @angular-eslint/no-input-rename\n    set _enable(value) {\n        warnOnce('tooltipEnable was deprecated, please use `isDisabled` instead');\n        this.isDisabled = !value;\n    }\n    get _enable() {\n        warnOnce('tooltipEnable was deprecated, please use `isDisabled` instead');\n        return this.isDisabled;\n    }\n    /** @deprecated - please use `container=\"body\"` instead */\n    // eslint-disable-next-line @angular-eslint/no-input-rename\n    set _appendToBody(value) {\n        warnOnce('tooltipAppendToBody was deprecated, please use `container=\"body\"` instead');\n        this.container = value ? 'body' : this.container;\n    }\n    get _appendToBody() {\n        warnOnce('tooltipAppendToBody was deprecated, please use `container=\"body\"` instead');\n        return this.container === 'body';\n    }\n    /** @deprecated - will replaced with customClass */\n    // eslint-disable-next-line @angular-eslint/no-input-rename\n    set _popupClass(value) {\n        warnOnce('tooltipClass deprecated');\n    }\n    /** @deprecated - removed */\n    // eslint-disable-next-line @angular-eslint/no-input-rename\n    set _tooltipContext(value) {\n        warnOnce('tooltipContext deprecated');\n    }\n    /** @deprecated */\n    // eslint-disable-next-line @angular-eslint/no-input-rename\n    set _tooltipPopupDelay(value) {\n        warnOnce('tooltipPopupDelay is deprecated, use `delay` instead');\n        this.delay = value;\n    }\n    /** @deprecated -  please use `triggers` instead */\n    get _tooltipTrigger() {\n        warnOnce('tooltipTrigger was deprecated, please use `triggers` instead');\n        return this.triggers;\n    }\n    set _tooltipTrigger(value) {\n        warnOnce('tooltipTrigger was deprecated, please use `triggers` instead');\n        this.triggers = (value || '').toString();\n    }\n    ngOnInit() {\n        this._tooltip.listen({\n            triggers: this.triggers,\n            show: () => this.show()\n        });\n        this.tooltipChange.subscribe((value) => {\n            if (!value) {\n                this._tooltip.hide();\n            }\n        });\n        this.onShown.subscribe(() => {\n            this.setAriaDescribedBy();\n        });\n        this.onHidden.subscribe(() => {\n            this.setAriaDescribedBy();\n        });\n    }\n    setAriaDescribedBy() {\n        this._ariaDescribedby = this.isOpen ? `tooltip-${this.tooltipId}` : void 0;\n        if (this._ariaDescribedby) {\n            this._renderer.setAttribute(this._elementRef.nativeElement, 'aria-describedby', this._ariaDescribedby);\n        }\n        else {\n            this._renderer.removeAttribute(this._elementRef.nativeElement, 'aria-describedby');\n        }\n    }\n    /**\n     * Toggles an element’s tooltip. This is considered a “manual” triggering of\n     * the tooltip.\n     */\n    toggle() {\n        if (this.isOpen) {\n            return this.hide();\n        }\n        this.show();\n    }\n    /**\n     * Opens an element’s tooltip. This is considered a “manual” triggering of\n     * the tooltip.\n     */\n    show() {\n        this._positionService.setOptions({\n            modifiers: {\n                flip: {\n                    enabled: this.adaptivePosition\n                },\n                preventOverflow: {\n                    enabled: this.adaptivePosition,\n                    boundariesElement: this.boundariesElement || 'scrollParent'\n                }\n            }\n        });\n        if (this.isOpen ||\n            this.isDisabled ||\n            this._delayTimeoutId ||\n            !this.tooltip) {\n            return;\n        }\n        const showTooltip = () => {\n            if (this._delayTimeoutId) {\n                this._delayTimeoutId = undefined;\n            }\n            this._tooltip\n                .attach(TooltipContainerComponent)\n                .to(this.container)\n                .position({ attachment: this.placement })\n                .show({\n                content: this.tooltip,\n                placement: this.placement,\n                containerClass: this.containerClass,\n                id: `tooltip-${this.tooltipId}`\n            });\n        };\n        const cancelDelayedTooltipShowing = () => {\n            if (this._tooltipCancelShowFn) {\n                this._tooltipCancelShowFn();\n            }\n        };\n        if (this.delay) {\n            if (this._delaySubscription) {\n                this._delaySubscription.unsubscribe();\n            }\n            this._delaySubscription = timer(this.delay).subscribe(() => {\n                showTooltip();\n                cancelDelayedTooltipShowing();\n            });\n            if (this.triggers) {\n                parseTriggers(this.triggers)\n                    .forEach((trigger) => {\n                    if (!trigger.close) {\n                        return;\n                    }\n                    this._tooltipCancelShowFn = this._renderer.listen(this._elementRef.nativeElement, trigger.close, () => {\n                        var _a;\n                        (_a = this._delaySubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n                        cancelDelayedTooltipShowing();\n                    });\n                });\n            }\n        }\n        else {\n            showTooltip();\n        }\n    }\n    /**\n     * Closes an element’s tooltip. This is considered a “manual” triggering of\n     * the tooltip.\n     */\n    hide() {\n        var _a;\n        if (this._delayTimeoutId) {\n            clearTimeout(this._delayTimeoutId);\n            this._delayTimeoutId = undefined;\n        }\n        if (!this._tooltip.isShown) {\n            return;\n        }\n        if ((_a = this._tooltip.instance) === null || _a === void 0 ? void 0 : _a.classMap) {\n            this._tooltip.instance.classMap[\"in\"] = false;\n        }\n        setTimeout(() => {\n            this._tooltip.hide();\n        }, this.tooltipFadeDuration);\n    }\n    ngOnDestroy() {\n        this._tooltip.dispose();\n        this.tooltipChange.unsubscribe();\n        if (this._delaySubscription) {\n            this._delaySubscription.unsubscribe();\n        }\n        this.onShown.unsubscribe();\n        this.onHidden.unsubscribe();\n    }\n}\nTooltipDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: TooltipDirective, deps: [{ token: i0.ViewContainerRef }, { token: i1.ComponentLoaderFactory }, { token: TooltipConfig }, { token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i3.PositioningService }], target: i0.ɵɵFactoryTarget.Directive });\nTooltipDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.1\", type: TooltipDirective, selector: \"[tooltip], [tooltipHtml]\", inputs: { adaptivePosition: \"adaptivePosition\", tooltip: \"tooltip\", placement: \"placement\", triggers: \"triggers\", container: \"container\", containerClass: \"containerClass\", boundariesElement: \"boundariesElement\", isOpen: \"isOpen\", isDisabled: \"isDisabled\", delay: \"delay\", htmlContent: [\"tooltipHtml\", \"htmlContent\"], _placement: [\"tooltipPlacement\", \"_placement\"], _isOpen: [\"tooltipIsOpen\", \"_isOpen\"], _enable: [\"tooltipEnable\", \"_enable\"], _appendToBody: [\"tooltipAppendToBody\", \"_appendToBody\"], tooltipAnimation: \"tooltipAnimation\", _popupClass: [\"tooltipClass\", \"_popupClass\"], _tooltipContext: [\"tooltipContext\", \"_tooltipContext\"], _tooltipPopupDelay: [\"tooltipPopupDelay\", \"_tooltipPopupDelay\"], tooltipFadeDuration: \"tooltipFadeDuration\", _tooltipTrigger: [\"tooltipTrigger\", \"_tooltipTrigger\"] }, outputs: { tooltipChange: \"tooltipChange\", onShown: \"onShown\", onHidden: \"onHidden\", tooltipStateChanged: \"tooltipStateChanged\" }, exportAs: [\"bs-tooltip\"], ngImport: i0 });\n__decorate([\n    OnChange(),\n    __metadata(\"design:type\", Object)\n], TooltipDirective.prototype, \"tooltip\", void 0);\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: TooltipDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[tooltip], [tooltipHtml]',\n                    exportAs: 'bs-tooltip'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }, { type: i1.ComponentLoaderFactory }, { type: TooltipConfig }, { type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i3.PositioningService }]; }, propDecorators: { adaptivePosition: [{\n                type: Input\n            }], tooltip: [{\n                type: Input\n            }], tooltipChange: [{\n                type: Output\n            }], placement: [{\n                type: Input\n            }], triggers: [{\n                type: Input\n            }], container: [{\n                type: Input\n            }], containerClass: [{\n                type: Input\n            }], boundariesElement: [{\n                type: Input\n            }], isOpen: [{\n                type: Input\n            }], isDisabled: [{\n                type: Input\n            }], delay: [{\n                type: Input\n            }], onShown: [{\n                type: Output\n            }], onHidden: [{\n                type: Output\n            }], htmlContent: [{\n                type: Input,\n                args: ['tooltipHtml']\n            }], _placement: [{\n                type: Input,\n                args: ['tooltipPlacement']\n            }], _isOpen: [{\n                type: Input,\n                args: ['tooltipIsOpen']\n            }], _enable: [{\n                type: Input,\n                args: ['tooltipEnable']\n            }], _appendToBody: [{\n                type: Input,\n                args: ['tooltipAppendToBody']\n            }], tooltipAnimation: [{\n                type: Input\n            }], _popupClass: [{\n                type: Input,\n                args: ['tooltipClass']\n            }], _tooltipContext: [{\n                type: Input,\n                args: ['tooltipContext']\n            }], _tooltipPopupDelay: [{\n                type: Input,\n                args: ['tooltipPopupDelay']\n            }], tooltipFadeDuration: [{\n                type: Input\n            }], _tooltipTrigger: [{\n                type: Input,\n                args: ['tooltipTrigger']\n            }], tooltipStateChanged: [{\n                type: Output\n            }] } });\n\nclass TooltipModule {\n    static forRoot() {\n        return {\n            ngModule: TooltipModule,\n            providers: [ComponentLoaderFactory, PositioningService]\n        };\n    }\n}\nTooltipModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: TooltipModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nTooltipModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: TooltipModule, declarations: [TooltipDirective, TooltipContainerComponent], imports: [CommonModule], exports: [TooltipDirective] });\nTooltipModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: TooltipModule, imports: [[CommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: TooltipModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [TooltipDirective, TooltipContainerComponent],\n                    exports: [TooltipDirective],\n                    entryComponents: [TooltipContainerComponent]\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TooltipConfig, TooltipContainerComponent, TooltipDirective, TooltipModule };\n"]},"metadata":{},"sourceType":"module"}