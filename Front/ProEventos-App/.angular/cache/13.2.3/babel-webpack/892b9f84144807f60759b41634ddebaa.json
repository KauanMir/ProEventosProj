{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, Directive, Output, HostBinding, Input, NgModule } from '@angular/core';\nimport * as i1 from '@angular/animations';\nimport { style, animate } from '@angular/animations';\nconst COLLAPSE_ANIMATION_TIMING = '400ms cubic-bezier(0.4,0.0,0.2,1)';\nconst expandAnimation = [style({\n  height: 0,\n  visibility: 'hidden'\n}), animate(COLLAPSE_ANIMATION_TIMING, style({\n  height: '*',\n  visibility: 'visible'\n}))];\nconst collapseAnimation = [style({\n  height: '*',\n  visibility: 'visible'\n}), animate(COLLAPSE_ANIMATION_TIMING, style({\n  height: 0,\n  visibility: 'hidden'\n}))];\n\nclass CollapseDirective {\n  constructor(_el, _renderer, _builder) {\n    this._el = _el;\n    this._renderer = _renderer;\n    /** This event fires as soon as content collapses */\n\n    this.collapsed = new EventEmitter();\n    /** This event fires when collapsing is started */\n\n    this.collapses = new EventEmitter();\n    /** This event fires as soon as content becomes visible */\n\n    this.expanded = new EventEmitter();\n    /** This event fires when expansion is started */\n\n    this.expands = new EventEmitter(); // shown\n\n    this.isExpanded = true;\n    this.collapseNewValue = true; // hidden\n\n    this.isCollapsed = false; // stale state\n\n    this.isCollapse = true; // animation state\n\n    this.isCollapsing = false;\n    /** turn on/off animation */\n\n    this.isAnimated = false;\n    this._display = 'block';\n    this._stylesLoaded = false;\n    this._COLLAPSE_ACTION_NAME = 'collapse';\n    this._EXPAND_ACTION_NAME = 'expand';\n    this._factoryCollapseAnimation = _builder.build(collapseAnimation);\n    this._factoryExpandAnimation = _builder.build(expandAnimation);\n  }\n\n  set display(value) {\n    this._display = value;\n\n    if (value === 'none') {\n      this.hide();\n      return;\n    }\n\n    this.isAnimated ? this.toggle() : this.show();\n  }\n  /** A flag indicating visibility of content (shown or hidden) */\n\n\n  set collapse(value) {\n    this.collapseNewValue = value;\n\n    if (!this._player || this._isAnimationDone) {\n      this.isExpanded = value;\n      this.toggle();\n    }\n  }\n\n  get collapse() {\n    return this.isExpanded;\n  }\n\n  ngAfterViewChecked() {\n    this._stylesLoaded = true;\n\n    if (!this._player || !this._isAnimationDone) {\n      return;\n    }\n\n    this._player.reset();\n\n    this._renderer.setStyle(this._el.nativeElement, 'height', '*');\n  }\n  /** allows to manually toggle content visibility */\n\n\n  toggle() {\n    if (this.isExpanded) {\n      this.hide();\n    } else {\n      this.show();\n    }\n  }\n  /** allows to manually hide content */\n\n\n  hide() {\n    this.isCollapsing = true;\n    this.isExpanded = false;\n    this.isCollapsed = true;\n    this.isCollapsing = false;\n    this.collapses.emit(this);\n    this._isAnimationDone = false;\n    this.animationRun(this.isAnimated, this._COLLAPSE_ACTION_NAME)(() => {\n      this._isAnimationDone = true;\n\n      if (this.collapseNewValue !== this.isCollapsed && this.isAnimated) {\n        this.show();\n        return;\n      }\n\n      this.collapsed.emit(this);\n\n      this._renderer.setStyle(this._el.nativeElement, 'display', 'none');\n    });\n  }\n  /** allows to manually show collapsed content */\n\n\n  show() {\n    this._renderer.setStyle(this._el.nativeElement, 'display', this._display);\n\n    this.isCollapsing = true;\n    this.isExpanded = true;\n    this.isCollapsed = false;\n    this.isCollapsing = false;\n    this.expands.emit(this);\n    this._isAnimationDone = false;\n    this.animationRun(this.isAnimated, this._EXPAND_ACTION_NAME)(() => {\n      this._isAnimationDone = true;\n\n      if (this.collapseNewValue !== this.isCollapsed && this.isAnimated) {\n        this.hide();\n        return;\n      }\n\n      this.expanded.emit(this);\n\n      this._renderer.removeStyle(this._el.nativeElement, 'overflow');\n    });\n  }\n\n  animationRun(isAnimated, action) {\n    if (!isAnimated || !this._stylesLoaded) {\n      return callback => callback();\n    }\n\n    this._renderer.setStyle(this._el.nativeElement, 'overflow', 'hidden');\n\n    this._renderer.addClass(this._el.nativeElement, 'collapse');\n\n    const factoryAnimation = action === this._EXPAND_ACTION_NAME ? this._factoryExpandAnimation : this._factoryCollapseAnimation;\n\n    if (this._player) {\n      this._player.destroy();\n    }\n\n    this._player = factoryAnimation.create(this._el.nativeElement);\n\n    this._player.play();\n\n    return callback => {\n      var _a;\n\n      return (_a = this._player) === null || _a === void 0 ? void 0 : _a.onDone(callback);\n    };\n  }\n\n}\n\nCollapseDirective.ɵfac = function CollapseDirective_Factory(t) {\n  return new (t || CollapseDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i1.AnimationBuilder));\n};\n\nCollapseDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CollapseDirective,\n  selectors: [[\"\", \"collapse\", \"\"]],\n  hostVars: 9,\n  hostBindings: function CollapseDirective_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵattribute(\"aria-hidden\", ctx.isCollapsed);\n      i0.ɵɵclassProp(\"collapse\", ctx.isCollapse)(\"in\", ctx.isExpanded)(\"show\", ctx.isExpanded)(\"collapsing\", ctx.isCollapsing);\n    }\n  },\n  inputs: {\n    display: \"display\",\n    isAnimated: \"isAnimated\",\n    collapse: \"collapse\"\n  },\n  outputs: {\n    collapsed: \"collapsed\",\n    collapses: \"collapses\",\n    expanded: \"expanded\",\n    expands: \"expands\"\n  },\n  exportAs: [\"bs-collapse\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CollapseDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[collapse]',\n      exportAs: 'bs-collapse',\n      // eslint-disable-next-line @angular-eslint/no-host-metadata-property\n      host: {\n        '[class.collapse]': 'true'\n      }\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.Renderer2\n    }, {\n      type: i1.AnimationBuilder\n    }];\n  }, {\n    collapsed: [{\n      type: Output\n    }],\n    collapses: [{\n      type: Output\n    }],\n    expanded: [{\n      type: Output\n    }],\n    expands: [{\n      type: Output\n    }],\n    isExpanded: [{\n      type: HostBinding,\n      args: ['class.in']\n    }, {\n      type: HostBinding,\n      args: ['class.show']\n    }],\n    isCollapsed: [{\n      type: HostBinding,\n      args: ['attr.aria-hidden']\n    }],\n    isCollapse: [{\n      type: HostBinding,\n      args: ['class.collapse']\n    }],\n    isCollapsing: [{\n      type: HostBinding,\n      args: ['class.collapsing']\n    }],\n    display: [{\n      type: Input\n    }],\n    isAnimated: [{\n      type: Input\n    }],\n    collapse: [{\n      type: Input\n    }]\n  });\n})();\n\nclass CollapseModule {\n  static forRoot() {\n    return {\n      ngModule: CollapseModule,\n      providers: []\n    };\n  }\n\n}\n\nCollapseModule.ɵfac = function CollapseModule_Factory(t) {\n  return new (t || CollapseModule)();\n};\n\nCollapseModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: CollapseModule\n});\nCollapseModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CollapseModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [CollapseDirective],\n      exports: [CollapseDirective]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CollapseDirective, CollapseModule };","map":{"version":3,"sources":["C:/Desktop/Estudos/ProEventos/front/ProEventos-app/node_modules/ngx-bootstrap/collapse/fesm2015/ngx-bootstrap-collapse.mjs"],"names":["i0","EventEmitter","Directive","Output","HostBinding","Input","NgModule","i1","style","animate","COLLAPSE_ANIMATION_TIMING","expandAnimation","height","visibility","collapseAnimation","CollapseDirective","constructor","_el","_renderer","_builder","collapsed","collapses","expanded","expands","isExpanded","collapseNewValue","isCollapsed","isCollapse","isCollapsing","isAnimated","_display","_stylesLoaded","_COLLAPSE_ACTION_NAME","_EXPAND_ACTION_NAME","_factoryCollapseAnimation","build","_factoryExpandAnimation","display","value","hide","toggle","show","collapse","_player","_isAnimationDone","ngAfterViewChecked","reset","setStyle","nativeElement","emit","animationRun","removeStyle","action","callback","addClass","factoryAnimation","destroy","create","play","_a","onDone","ɵfac","ElementRef","Renderer2","AnimationBuilder","ɵdir","type","args","selector","exportAs","host","CollapseModule","forRoot","ngModule","providers","ɵmod","ɵinj","declarations","exports"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { EventEmitter, Directive, Output, HostBinding, Input, NgModule } from '@angular/core';\nimport * as i1 from '@angular/animations';\nimport { style, animate } from '@angular/animations';\n\nconst COLLAPSE_ANIMATION_TIMING = '400ms cubic-bezier(0.4,0.0,0.2,1)';\nconst expandAnimation = [\n    style({ height: 0, visibility: 'hidden' }),\n    animate(COLLAPSE_ANIMATION_TIMING, style({ height: '*', visibility: 'visible' }))\n];\nconst collapseAnimation = [\n    style({ height: '*', visibility: 'visible' }),\n    animate(COLLAPSE_ANIMATION_TIMING, style({ height: 0, visibility: 'hidden' }))\n];\n\nclass CollapseDirective {\n    constructor(_el, _renderer, _builder) {\n        this._el = _el;\n        this._renderer = _renderer;\n        /** This event fires as soon as content collapses */\n        this.collapsed = new EventEmitter();\n        /** This event fires when collapsing is started */\n        this.collapses = new EventEmitter();\n        /** This event fires as soon as content becomes visible */\n        this.expanded = new EventEmitter();\n        /** This event fires when expansion is started */\n        this.expands = new EventEmitter();\n        // shown\n        this.isExpanded = true;\n        this.collapseNewValue = true;\n        // hidden\n        this.isCollapsed = false;\n        // stale state\n        this.isCollapse = true;\n        // animation state\n        this.isCollapsing = false;\n        /** turn on/off animation */\n        this.isAnimated = false;\n        this._display = 'block';\n        this._stylesLoaded = false;\n        this._COLLAPSE_ACTION_NAME = 'collapse';\n        this._EXPAND_ACTION_NAME = 'expand';\n        this._factoryCollapseAnimation = _builder.build(collapseAnimation);\n        this._factoryExpandAnimation = _builder.build(expandAnimation);\n    }\n    set display(value) {\n        this._display = value;\n        if (value === 'none') {\n            this.hide();\n            return;\n        }\n        this.isAnimated ? this.toggle() : this.show();\n    }\n    /** A flag indicating visibility of content (shown or hidden) */\n    set collapse(value) {\n        this.collapseNewValue = value;\n        if (!this._player || this._isAnimationDone) {\n            this.isExpanded = value;\n            this.toggle();\n        }\n    }\n    get collapse() {\n        return this.isExpanded;\n    }\n    ngAfterViewChecked() {\n        this._stylesLoaded = true;\n        if (!this._player || !this._isAnimationDone) {\n            return;\n        }\n        this._player.reset();\n        this._renderer.setStyle(this._el.nativeElement, 'height', '*');\n    }\n    /** allows to manually toggle content visibility */\n    toggle() {\n        if (this.isExpanded) {\n            this.hide();\n        }\n        else {\n            this.show();\n        }\n    }\n    /** allows to manually hide content */\n    hide() {\n        this.isCollapsing = true;\n        this.isExpanded = false;\n        this.isCollapsed = true;\n        this.isCollapsing = false;\n        this.collapses.emit(this);\n        this._isAnimationDone = false;\n        this.animationRun(this.isAnimated, this._COLLAPSE_ACTION_NAME)(() => {\n            this._isAnimationDone = true;\n            if (this.collapseNewValue !== this.isCollapsed && this.isAnimated) {\n                this.show();\n                return;\n            }\n            this.collapsed.emit(this);\n            this._renderer.setStyle(this._el.nativeElement, 'display', 'none');\n        });\n    }\n    /** allows to manually show collapsed content */\n    show() {\n        this._renderer.setStyle(this._el.nativeElement, 'display', this._display);\n        this.isCollapsing = true;\n        this.isExpanded = true;\n        this.isCollapsed = false;\n        this.isCollapsing = false;\n        this.expands.emit(this);\n        this._isAnimationDone = false;\n        this.animationRun(this.isAnimated, this._EXPAND_ACTION_NAME)(() => {\n            this._isAnimationDone = true;\n            if (this.collapseNewValue !== this.isCollapsed && this.isAnimated) {\n                this.hide();\n                return;\n            }\n            this.expanded.emit(this);\n            this._renderer.removeStyle(this._el.nativeElement, 'overflow');\n        });\n    }\n    animationRun(isAnimated, action) {\n        if (!isAnimated || !this._stylesLoaded) {\n            return (callback) => callback();\n        }\n        this._renderer.setStyle(this._el.nativeElement, 'overflow', 'hidden');\n        this._renderer.addClass(this._el.nativeElement, 'collapse');\n        const factoryAnimation = (action === this._EXPAND_ACTION_NAME)\n            ? this._factoryExpandAnimation\n            : this._factoryCollapseAnimation;\n        if (this._player) {\n            this._player.destroy();\n        }\n        this._player = factoryAnimation.create(this._el.nativeElement);\n        this._player.play();\n        return (callback) => { var _a; return (_a = this._player) === null || _a === void 0 ? void 0 : _a.onDone(callback); };\n    }\n}\nCollapseDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: CollapseDirective, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i1.AnimationBuilder }], target: i0.ɵɵFactoryTarget.Directive });\nCollapseDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.1\", type: CollapseDirective, selector: \"[collapse]\", inputs: { display: \"display\", isAnimated: \"isAnimated\", collapse: \"collapse\" }, outputs: { collapsed: \"collapsed\", collapses: \"collapses\", expanded: \"expanded\", expands: \"expands\" }, host: { properties: { \"class.collapse\": \"this.isCollapse\", \"class.in\": \"this.isExpanded\", \"class.show\": \"this.isExpanded\", \"attr.aria-hidden\": \"this.isCollapsed\", \"class.collapsing\": \"this.isCollapsing\" } }, exportAs: [\"bs-collapse\"], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: CollapseDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[collapse]',\n                    exportAs: 'bs-collapse',\n                    // eslint-disable-next-line @angular-eslint/no-host-metadata-property\n                    host: {\n                        '[class.collapse]': 'true'\n                    }\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i1.AnimationBuilder }]; }, propDecorators: { collapsed: [{\n                type: Output\n            }], collapses: [{\n                type: Output\n            }], expanded: [{\n                type: Output\n            }], expands: [{\n                type: Output\n            }], isExpanded: [{\n                type: HostBinding,\n                args: ['class.in']\n            }, {\n                type: HostBinding,\n                args: ['class.show']\n            }], isCollapsed: [{\n                type: HostBinding,\n                args: ['attr.aria-hidden']\n            }], isCollapse: [{\n                type: HostBinding,\n                args: ['class.collapse']\n            }], isCollapsing: [{\n                type: HostBinding,\n                args: ['class.collapsing']\n            }], display: [{\n                type: Input\n            }], isAnimated: [{\n                type: Input\n            }], collapse: [{\n                type: Input\n            }] } });\n\nclass CollapseModule {\n    static forRoot() {\n        return { ngModule: CollapseModule, providers: [] };\n    }\n}\nCollapseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: CollapseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nCollapseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: CollapseModule, declarations: [CollapseDirective], exports: [CollapseDirective] });\nCollapseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: CollapseModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: CollapseModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [CollapseDirective],\n                    exports: [CollapseDirective]\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CollapseDirective, CollapseModule };\n"]},"metadata":{},"sourceType":"module"}